\input texinfo                  @c -*- Texinfo -*-
@c Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
@c 
@c This file is part of Poldi.
@c
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 2 of the License, or (at your
@c option) any later version. A copy of the license is included in the 
@c file 'gpl.texi'.
@c
@setfilename poldi.info
@settitle The `Poldi Reference Manual

@dircategory GNU Utilities
@direntry
* poldi: (poldi) PAM authenciation via OpenPGP smartcards.
@end direntry

@include version.texi

@ifinfo
This file documents `Poldi'.

This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{The Poldi Manual}, for Version @value{VERSION}.

Copyright @copyright{} 2004, 2005, 2006, 2007, 2008 g10 Code GmbH.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.
@end ifinfo

@titlepage
@center @titlefont{The Poldi Manual}
@sp 6
@center Edition @value{EDITION}
@sp 1
@center last updated @value{UPDATED}
@sp 1
@center for version @value{VERSION}
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2004, 2005, 2006, 2007, 2008 g10 Code GmbH.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.
@end titlepage
@summarycontents
@contents
@page

@ifnottex
@node Top
@top Main Menu
This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{The Poldi Manual}, for Version
@value{VERSION} of Poldi.

Copyright @copyright{} 2004, 2005, 2006, 2007, 2008 g10 Code GmbH.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.

@end ifnottex

@menu
* Overview::
* Authentication methods::
* Installation from Source::
* Configuration::
* Configuration Example::
* Testing::
* Notes on Applications::

Appendices
* Copying::                     The GNU General Public License

@c @detailmenu
@c  --- The Detailed Node Listing ---
@c * Overview::                    Overview
@c * Building::                    Building Poldi
@c @end detailmenu

@end menu

@node Overview
@chapter Overview

Poldi is a PAM module implementing challenge/response based
authentication through the OpenPGP smartcard
(http://www.g10code.de/p-card.html).  It makes use of several GnuPG
components (Libgcrypt, Assuan, Scdaemon, Dirmngr) and currently supports two
authentication methods:

@table @asis
@item ``local-database'' authentication method

This method establishs the mapping between user accounts and
smartcards through a locally administered database.

@item ``X509'' authentication

This method uses the PKI infrastructure provided by Dirmngr for
validating certificates.  OpenPGP smartcards are associated with X509
certificates through the smartcard's ``url'' field; the user account
name to use for authentication is extracted from the certificate.
@end table

This manual is primarily intended for system administrators interested
in setting up authentication through PAM Poldi.  The next chapter
explains the supported authentication methods.

@node Authentication methods
@chapter Authentication methods

This chapter explains the supported authentication methods in detail.

@menu
* Local-database authentication::
* X509 authentication::
@end menu

@node Local-database authentication
@section Local-database authentication

The login process through local database authentication consists
essentially of three parts: looking up the smartcards key on the local
computer, figuring out the desired identity for the login and finally
doing challenge/response authentication against the local key.

Poldi maintains a database, which associates local user accounts with
smartcards (through their serial number).  There are little
restrictions in respect to the mapping of users and smartcards: one
smartcard can be associated with many users and one user can be
associated with many smartcards.

The public keys are stored in files in a subdirectory named
``keys''. The file are named after the card serial numbers and must
contain the public key as a single S-Expression as it is printed out
by poldi-ctrl.

The mapping between keys and Unix accounts is to be established by
adding appropriate entries to the user database file named ``users''.
Such an entry is of the following form:

@example
<card serial number> <white space(s)> <account>.
@end example

@node X509 authentication
@section X509 authentication

With X509 authentication smartcards need to be associated with X509
certicates.  This mapping is to be established through the ``url''
field on the OpenPGP smartcard.  The url field is expected to hold
either a valid LDAP url (``ldap://...'') or a file url
(``file:///somewhere/cert'').  After a certificate has been
successfuly looked up, it is validated through Dirmngr and a
challenge-response authentication is triggered against the smartcard.
The mapping between smartcards and local accounts is established
through the list of e-mail addresses contained in the certificate.

@node Installation from Source
@chapter Installation from Source

Building and installing Poldi from source should be pretty
straightforward, since it uses the GNU autotools.  Build- and runtime
dependencies may vary with the enabled authentication methods.

Independent from enabled authentication methods, Poldi depends on
Libgpg-error, Libgcrypt, Libassuan, Scdaemon and of course Libpam.

The ``X509'' authentication method additionaly has a build-time
dependency on libksba and requires Dirmngr to be properly setup at
runtime.  The ``local database'' authentication method has no
additional requirements.

Details on the building procedure can be found in the file
``INSTALL''.

At least one configure switch should be set:
@code{--with-pam-module-directory}, which specifies the installation
directory for PAM modules.  Alternatively one can copy the built PAM
module (named ``pam_poldi.so'') to the correct place manually.

For building the Poldi package, ``make'' needs to be invoked.

Installing Poldi works by invoking the ``install'' make target.  As
noted before, special care must be taken so that the PAM module ends up
in the correct place.

Poldi requires some directories beneath `SYSCONFDIR/poldi', which is
usually equal to `PREFIX/etc/poldi'. These directories can be created
manually or through the `install-conf-skeleton' make target.

@node Configuration
@chapter Configuration

Poldi can be configured through configuration files and through PAM
arguments.  All configuration files of Poldi are stored beneath
``@code{sysconfdir}/poldi''.

Poldi's main configuration file is
``@code{sysconfdir}/poldi/poldi.conf''.  The syntax of Poldi's
configuration file is identical to the one used by several other GnuPG
components; options and their values are written next to each other,
seperated by a whitespace - one such configuration item per line.

Poldi supports the following authentication method independent
options, which can be specified in the main configuration file and in
the PAM configuration files as arguments to the Poldi PAM module (with
standard doubledash notation).

@table @code
@item logfile FILENAME
Specify the file to use for log messages.
@item auth-method AUTH-METHOD
Specify the authentication method to use.  May be either ``localdb
or ``x509''.
@item debug
Enable debugging messages.
@end table

Further configuration depends on the authentication method to use.

@menu
* Configuration for ``local-database'' authentication::
* Configuration for ``X509'' authentication::
@end menu

@node Configuration for ``local-database'' authentication
@section Configuration for ``local-database'' authentication

For the local-database authentication method additional configuration
is required.  All local-database specific configuration files are
stored in the subdirectory ``localdb'':

@table @code

@item FIXME

@end table


@node Configuration for ``X509'' authentication
@section Configuration for ``X509'' authentication

In case X509 authentication is enabled, Poldi tries to parse another
configuration file, namely ``x509/poldi-x509.conf''.  The following
configuration options are supported for this configuration file:

@table @code

@item dirmngr-socket FILENAME
Specify the socket to be used for communication with Dirmngr.

@item x509-domain STRING
Specify email address foobar suffix.

@end table

@node Configuration Example
@chapter Configuration Example

@menu
* Example for ``local-database'' authentication::
* Example for ``X509'' authentication::
@end menu

@node Example for ``local-database'' authentication
@section Example for ``local-database'' authentication

Lets assume a new installation of Poldi into the root filesystem,
having configuration files stored beneath /etc/poldi. The user
``moritz'', who got an OpenPGP card with the serial number
``D2760001240101010001000006550000, would like to authenticate himself
through Poldi.

First, the system administrator has to associate the user moritz with
the card's serial number:

@example
$ echo "D2760001240101010001000006550000 moritz" >> /etc/poldi/localdb/users
@end example

Second, the system administrator needs to write the card's key into a
card-specific key file:

@example
$ poldi-ctrl --print-key > /etc/poldi/localdb/keys/D2760001240101010001000006550000
@end example

Change ownership if moritz should be able to install or update his
card's key himself:

@example
$ chown moritz /etc/poldi/localdb/keys/D2760001240101010001000006550000
@end example

That's it.

@node Example for ``X509'' authentication
@section Example for ``X509'' authentication

FIXME.

@node Testing
@chapter Testing

Authentication through Poldi should be tested before activating the
module.  For this purpose, the Poldi package includes a simple program
named ``pam-test'', which is suitable for testing PAM authentication.

@menu
* The pam-test program::
@end menu

@node The pam-test program
@section The pam-test program

pam-test is a small program suitable for testing PAM authentication,
without any Poldi specific aspects.  Synopsis:

@example # FIXME
pam-test [options] <service name>
@end example

The program accepts the following options: FIXME.


@node Notes on Applications
@chapter Notes on Applications

Generally speaking, all applications containing a decent PAM
integration should work flawlessly in combination with Poldi.  Sadly,
there are applications out there, which do not use PAM correctly.
Therefore, they might work not too well in case they are configured to
use Poldi.

This chapter attempts to list the most common problems or useful hints
in respect to popular applications.

When applications still ask for e.g. a username although Poldi is
activated for that application, it might be the case that other
authentication modules, which trigger this kind of user interaction, are
configured to run prior to Poldi.

@menu
* login::
* su::
* gdm::
* xdm::
* kdm::
@end menu

@node login
@section login

The `login'-program contained in the `shadow'-package (>= v4.0.3) works
fine together with Poldi.

Usually login is launched by `getty', which might trigger user
interaction, which is not appropriate for use with Poldi (e.g., asking
for a username).  In this case, getty needs to be told to skip the task
of username querying.

The getty-program from the `util-linux'-package can be started with the
`-n' argument in order to not ask for a username.

@node su
@section su

The `su'-program contained in the `shadow'-package (>= v4.0.3) works
fine together with Poldi.

@node gdm
@section gdm

GDM contains two frontends, the `graphical greeter' and the `standard
greeter'.

At least the standard greeter can be used with Poldi just fine; the
graphical greeter obviously asks for usernames prior to triggering PAM
authentication.

@node xdm
@section xdm

XDM does ask for usernames prior to triggering PAM authentication, as
such it is not too suitable for use with Poldi.

@node kdm
@section kdm

KDM asks for username and password in it's default configuration,
instead of implementing PAM correctly.

@include gpl.texi

@bye
