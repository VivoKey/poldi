\input texinfo                  @c -*- Texinfo -*-
@c Copyright (C) 2000, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
@c 
@c This file is part of Poldi.
@c
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 2 of the License, or (at your
@c option) any later version. A copy of the license is included in the 
@c file 'gpl.texi'.
@c
@setfilename poldi.info
@settitle The `Poldi Reference Manual

@dircategory GNU Utilities
@direntry
* poldi: (poldi) PAM authenciation via OpenPGP smartcards.
@end direntry

@include version.texi

@ifinfo
This file documents `Poldi'.

This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{The `Poldi Reference Manual}, for Version @value{VERSION}.

Copyright @copyright{} 2004, 2005 g10 Code GmbH.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.
@end ifinfo

@titlepage
@center @titlefont{The `Poldi'}
@sp 1
@center @titlefont{Reference Manual}
@sp 6
@center Edition @value{EDITION}
@sp 1
@center last updated @value{UPDATED}
@sp 1
@center for version @value{VERSION}
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2004, 2005 g10 Code GmbH.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.
@end titlepage
@summarycontents
@contents
@page

@ifnottex
@node Top
@top Main Menu
This is Edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{The `Poldi Reference Manual}, for Version
@value{VERSION} of Poldi.

Copyright @copyright{} 2004, 2005 g10 Code GmbH.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version. The text of the license can be found in the
section entitled ``Copying''.

@end ifnottex

@menu
* Introduction::                 What is Poldi
* Using Poldi::                  Using Poldi
* Applications::                 Notes on applications

Appendices
* Copying::                     The GNU General Public License

@detailmenu
 --- The Detailed Node Listing ---
Introduction
* Overview::                    Overview
* Building::                    Building Poldi
@end detailmenu

@end menu

@node Introduction
@chapter Introduction

@menu
* Overview::                    Overview
* Building::                    Building Poldi
* Installing::                  Installing Poldi
@end menu

@node Overview
@section Overview

Poldi is package consisting of a PAM module (pam_poldi) and a CLI
program (poldi-ctrl) , which implement authentication via OpenPGP
smartcards (http://www.g10code.de/p-card.html).

@node Building
@section Building

Building Poldi should be pretty straightforward; Poldi depends on the
following packages: Libgcrypt, Libgpg-error.

Details on the build procedure can be found in the file ``INSTALL''.  At
least one configure switch should be set:
@code{--with-pam-module-directory}, which specifies the installation
directory for PAM modules.

@node Installing
@section Installing

Installing Poldi should not require more than an invocation of the
``install'' make target.

Poldi requires some directories beneath `SYSCONFDIR/poldi', which is
usually equal to `PREFIX/etc/poldi'.

The directories can be created manually or through the
`install-conf-skeleton' make target.

@node Using Poldi
@chapter Using Poldi

In this chapter you will find information on the correct configuration
and Usage of Poldi.

@menu
* Configuration::               Configuring Poldi
* Access control::              How to setup Poldi for authentication
* Example::                     Example
* Testing::                     Testing basic functionality
@end menu

@node Configuration
@section Configuration

All configuration files of Poldi are stored beneath
``@code{sysconfdir}/poldi''.

Poldi's main configuration file is
``@code{sysconfdir}/poldi/poldi.conf''.  The syntax of this
configuration file is identical to the one used by several other GnuPG
components; options, and their values, are written next each other,
seperated by a whitespace - one such configuration item per line.

Poldi supports the following options:

@table @code
@item ctapi-driver <driver name>
@item pcsc-driver <driver name>
@item reader-port <reader port>
@item disable-ccid
@item disable-opensc
@item debug-ccid-driver
@item logfile
@end table

The semantics used by Poldi in respect to choosing a default card
driver and handling of the card driver specific options should match
those of scdaemon.

@node Access control
@section Access control

In order for a user to be able to authenticate himself through Poldi,
several preconditions must be satisfied:

@table @asis
@item the smartcard in question needs to be introduced to Poldi
@item the smartcard's key must be installed
@item the user must be associated with the smartcard
@end table

@table @asis

@item Smartcard management:

Poldi manages a list of ``registered'' smartcards.  Each registered
smartcard is associated with exactly one key.

Smartcard registration/unregistration needs to be done by a user having
write access to Poldi's key directory, which is stored beneath
SYSCONFDIR/poldi by default.  Therefore the system administrator is
usually the only user able to register/unregister smartcards in case
Poldi is installed globally in the system.

It might be desired to allow a user who is not the system administrator
to install or update the key of his smartcard.  In this case, the
appropriate user needs to be specified during card registration.

@item Key setup:

After a smartcard has been registered, it's key needs to be installed in
order to allow authentication with the given card.

@item Associating a user with a card:

Poldi manages a ``user database'', which is used for associating users
with smartcards.  There are no quantitative restrictions in respect to
the mapping of users and smartcards: on smartcard can be associated with
many users and one user can be associated with many smartcards.

@item Details:

The public keys are stored in files beneath the directory
``keys''. which are named after the card serial numbers.  These files
must contain the public key as a single S-Expression.

The mapping between keys and Unix accounts is to be established by
adding appropriate entries to the user database file named ``users''.
Such an entry has to be of the following form:

<card serial number> <white space(s)> <account>.

@end table

@node Example
@section Example

The user ``bender'', who got a OpenPGP card with the serial number
``D2760001240101000001000000CF0000'', would like to authenticate himself
through Poldi.  Neither the card, nor the user is already known to
Poldi.

First, the system administrator has to register the new card for Poldi:

@example
$ poldi-ctrl --register-card --serialno D2760001240101000001000000CF0000
@end example

If bender should be able to install or update his card's key himself,
the following can be used:

@example
$ poldi-ctrl --register-card --account bender --serialno D2760001240101000001000000CF0000
@end example

Now, after the card has been registered, a mapping needs to be
established between the user ``bender'' and the smartcard he owns:

@example
$ poldi-ctrl --associate --account bender --serialno D2760001240101000001000000CF0000
@end example

Now, bender has to write the public key of his OpenPGP card into the
appropriate key file:

@example
$ poldi-ctrl --set-key
@end example

That's it.

@node Testing
@section Testing

After configuring Poldi properly, basic functionality should be tested
prior to integrating the PAM module into the system.

In order to test basic card access, poldi-ctrl can be used as follows
to dump information read from the card:

@example
$ poldi-ctrl --dump
@end example

After verifying the correct interaction with the card, poldi-ctrl
should be used to simulate an authentication mechanism:

@example
$ poldi-ctrl --test
@end example

If this works as well, Poldi should be ready for integration into the
PAM system.

@node Applications
@chapter Applications

Generally speaking, all applications containing a decent PAM integration
should work flawlessly in combination with Poldi.  Sadly, there are
applications out there, which do not use PAM as they should.  Therefore,
they might work not too well in case they are configured to use Poldi.

This chapter attempts to list the most common problems or useful hints
in respect to popular applications.

When applications still ask for e.g. a username although Poldi is
activated for that application, it might be the case that other
authentication modules, which trigger this kind of user interaction, are
run prior to Poldi.

@menu
* login::
* su::
* gdm::
* xdm::
* kdm::
@end menu

@node login
@section login

The `login'-program contained in the `shadow'-package (>= v4.0.3) works
fine together with Poldi.

Usually login is launched by `getty', which might trigger user
interaction, which is not appropriate for use with Poldi (e.g., asking
for a username).  In this case, getty needs to be told to skip the task
of username querying.

The getty-program from the `util-linux'-package can be started with the
`-n' argument in order to not ask for a username.

@node su
@section su

The `su'-program contained in the `shadow'-package (>= v4.0.3) works
fine together with Poldi.

@node gdm
@section gdm

GDM contains two frontends, the `graphical greeter' and the `standard
greeter'.

At least the standard greeter can be used with Poldi just fine; the
graphical greeter obviously asks for usernames prior to triggering PAM
authentication.

@node xdm
@section xdm

XDM does ask for usernames prior to triggering PAM authentication, as
such it is not too suitable for use with Poldi.

@node kdm
@section kdm

KDM asks for username and password in it's default configuration,
instead of implementing PAM correctly.

@include gpl.texi

@bye
